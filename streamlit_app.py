# -*- coding: utf-8 -*-
"""
Streamlit App ‚Äî –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ (FPDF2 + qrcode, Unicode)
–¢—Ä–µ–±—É–µ—Ç Unicode-—à—Ä–∏—Ñ—Ç—ã (TTF) –≤ –ø–∞–ø–∫–µ ./fonts (–Ω–∞–ø—Ä–∏–º–µ—Ä, DejaVu Sans).
–§–∞–π–ª—ã (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è): 
- fonts/DejaVuSans.ttf
- fonts/DejaVuSans-Bold.ttf
- fonts/DejaVuSans-Oblique.ttf  (–∏–ª–∏ DejaVuSans-Italic.ttf)
"""
import io
import os
from datetime import date
import streamlit as st
from fpdf import FPDF
from PIL import Image
import qrcode

st.set_page_config(page_title="DocGen - –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è (FPDF2 Unicode)", page_icon="üìÑ")

FONTS_DIR = os.path.join(os.path.dirname(__file__), "fonts")

def fonts_available():
    return all(os.path.exists(os.path.join(FONTS_DIR, fname)) for fname in [
        "DejaVuSans.ttf", "DejaVuSans-Bold.ttf", "DejaVuSans-Oblique.ttf"
    ])

def register_unicode_fonts(pdf: FPDF):
    pdf.add_font("DejaVu", style="", fname=os.path.join(FONTS_DIR, "DejaVuSans.ttf"), uni=True)
    pdf.add_font("DejaVu", style="B", fname=os.path.join(FONTS_DIR, "DejaVuSans-Bold.ttf"), uni=True)
    # –û–±–æ–∑–Ω–∞—á–∞–µ–º –∫—É—Ä—Å–∏–≤ –∫–∞–∫ Oblique (–∏–ª–∏ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ Italic, –µ—Å–ª–∏ —É –≤–∞—Å –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª)
    pdf.add_font("DejaVu", style="I", fname=os.path.join(FONTS_DIR, "DejaVuSans-Oblique.ttf"), uni=True)

# -------- helpers --------
def soften_long_tokens(text: str, hard_limit: int = 40) -> str:
    def split_token(tok):
        if len(tok) <= hard_limit: 
            return tok
        parts = [tok[i:i+hard_limit] for i in range(0, len(tok), hard_limit)]
        return " ".join(parts)
    return " ".join(split_token(t) for t in (text or "").split())

def make_qr_image(qr_text: str, box_size: int = 6, border: int = 2) -> Image.Image:
    qr_obj = qrcode.QRCode(
        version=None,
        error_correction=qrcode.constants.ERROR_CORRECT_M,
        box_size=box_size,
        border=border,
    )
    qr_obj.add_data(qr_text)
    qr_obj.make(fit=True)
    img = qr_obj.make_image(fill_color="black", back_color="white")
    return img.convert("RGB")

# ---------- PDF generator (FPDF2) ----------
class DeclaracaoPDF(FPDF):
    def header(self):
        pass

def generate_pdf(nome, doc_id, cpf, endereco, local, data_str, logo_bytes=None, qr_text=None):
    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
    nome = soften_long_tokens(nome)
    doc_id = soften_long_tokens(doc_id)
    cpf = soften_long_tokens(cpf)
    endereco = soften_long_tokens(endereco)
    local = soften_long_tokens(local)
    if qr_text:
        qr_text = qr_text.strip()

    pdf = DeclaracaoPDF(orientation="P", unit="mm", format="A4")
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º Unicode-—à—Ä–∏—Ñ—Ç—ã
    if fonts_available():
        register_unicode_fonts(pdf)
        base_font = "DejaVu"
    else:
        base_font = "helvetica"  # fallback (–Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∏—Ä–∏–ª–ª–∏—Ü—É)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ + –ª–æ–≥–æ—Ç–∏–ø
    if logo_bytes:
        try:
            pdf.image(io.BytesIO(logo_bytes), x=15, y=12, w=30)
        except Exception:
            pass

    pdf.set_font(base_font, "B", 16 if base_font == "DejaVu" else 18)
    pdf.set_xy(0, 20)
    pdf.cell(w=0, h=10, txt="–î–ï–ö–õ–ê–†–ê–¶–ò–Ø –û –ú–ï–°–¢–ï –ñ–ò–¢–ï–õ–¨–°–¢–í–ê (DECLARA√á√ÉO DE RESID√äNCIA)", align="C", new_x="LMARGIN", new_y="NEXT")

    pdf.ln(3)
    pdf.set_font(base_font, "", 12)
    content_w = pdf.w - pdf.l_margin - pdf.r_margin
    pdf.set_x(pdf.l_margin)

    corpo1 = (
        f"–Ø, {nome}, —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏ ‚Ññ {doc_id}, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π(–∞—è) –≤ CPF ‚Ññ {cpf}, "
        f"–∑–∞—è–≤–ª—è—é –ø–æ–¥ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –∑–∞–∫–æ–Ω—É, —á—Ç–æ –ø—Ä–æ–∂–∏–≤–∞—é –ø–æ –∞–¥—Ä–µ—Å—É: "
        f"(Eu, {nome}, portador(a) do documento de identidade n¬∫ {doc_id}, inscrito(a) no CPF sob n¬∫ {cpf}, "
        f"declaro, sob as penas da lei, que resido no seguinte endere√ßo:)"
    )
    pdf.multi_cell(w=content_w, h=7, txt=corpo1, align="J")

    pdf.set_x(pdf.l_margin)
    pdf.set_font(base_font, "I", 12)
    pdf.multi_cell(w=content_w, h=7, txt=endereco, align="J")
    pdf.set_font(base_font, "", 12)

    pdf.ln(2)
    pdf.set_x(pdf.l_margin)
    corpo2 = (
        "–¢–∞–∫–∂–µ –∑–∞—è–≤–ª—è—é, —á—Ç–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –∑–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–π "
        "–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–¥ –º–æ–µ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é. "
        "(Declaro ainda que as informa√ß√µes aqui prestadas s√£o verdadeiras "
        "e de minha inteira responsabilidade.)"
    )
    pdf.multi_cell(w=content_w, h=7, txt=corpo2, align="J")

    pdf.ln(5)
    pdf.set_x(pdf.l_margin)
    pdf.cell(w=content_w, h=7, txt=f"{local}, {data_str}", new_x="LMARGIN", new_y="NEXT")

    # –õ–∏–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏
    pdf.ln(12)
    x = pdf.l_margin
    y = pdf.get_y()
    pdf.line(x, y, pdf.w - pdf.r_margin, y)
    pdf.set_y(y + 3)
    pdf.set_font(base_font, "", 10)
    pdf.cell(w=content_w, h=6, txt="–ü–æ–¥–ø–∏—Å—å –∑–∞—è–≤–∏—Ç–µ–ª—è (Assinatura do Declarante)", align="C", new_x="LMARGIN", new_y="NEXT")

    # QR
    if qr_text:
        try:
            img = make_qr_image(qr_text, box_size=4, border=2)
            buf = io.BytesIO()
            img.save(buf, format="PNG")
            buf.seek(0)
            pdf.ln(5)
            pdf.set_font(base_font, "", 10)
            pdf.set_x(pdf.l_margin)
            pdf.cell(w=content_w, h=6, txt="–ü—Ä–æ–≤–µ—Ä–∫–∞ (Verifica√ß√£o):", new_x="LMARGIN", new_y="NEXT")
            pdf.image(buf, x=pdf.l_margin, w=30)
        except Exception:
            pass

    # –§—É—Ç–µ—Ä
    pdf.ln(6)
    if base_font != "helvetica":
        pdf.set_text_color(80, 80, 80)
        pdf.set_font(base_font, "", 9)
        pdf.set_x(pdf.l_margin)
        pdf.multi_cell(w=content_w, h=5, txt="–î–æ–∫—É–º–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (Documento gerado automaticamente) ‚Äî DocGen MVP", align="L")
        pdf.set_text_color(0, 0, 0)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç Unicode-—à—Ä–∏—Ñ—Ç–æ–≤ ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã Unicode-—à—Ä–∏—Ñ—Ç—ã –≤ –ø–∞–ø–∫–µ ./fonts. –î–æ–±–∞–≤—å—Ç–µ DejaVuSans.ttf, DejaVuSans-Bold.ttf, DejaVuSans-Oblique.ttf –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã.")
    return pdf.output(dest="S").encode("latin1")

# -------- UI --------
st.title("üìÑ –î–µ–∫–ª–∞—Ä–∞—Ü–∏—è –æ –º–µ—Å—Ç–µ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞ ‚Äî FPDF2 (Unicode)")
st.write("–†—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç + –ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π –≤ —Å–∫–æ–±–∫–∞—Ö. –ß—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –ø–æ–ª–æ–∂–∏—Ç–µ Unicode-—à—Ä–∏—Ñ—Ç—ã –≤ –ø–∞–ø–∫—É **fonts/**.")

with st.form("doc_form"):
    col1, col2 = st.columns(2)
    with col1:
        nome = st.text_input("–§–ò–û (Nome completo)", "")
        doc_id = st.text_input("–î–æ–∫—É–º–µ–Ω—Ç (RG/RNE/RNM)", "")
        cpf = st.text_input("CPF", "")
        local = st.text_input("–ú–µ—Å—Ç–æ (–ì–æ—Ä–æ–¥/–®—Ç–∞—Ç) ‚Äî Local (Cidade/UF)", "S√£o Paulo/SP")
        data_input = st.date_input("–î–∞—Ç–∞ (Data)", value=date.today())
    with col2:
        logo_file = st.file_uploader("–õ–æ–≥–æ—Ç–∏–ø (PNG/JPG) ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (Logo opcional)", type=["png","jpg","jpeg"])
        qr_text = st.text_input("QR: —Å—Å—ã–ª–∫–∞/ID ‚Äî –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (Texto para QR ‚Äî opcional)", "")
    endereco = st.text_area("–ü–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (Endere√ßo completo)", "")
    gerar = st.form_submit_button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF (Gerar PDF)")

if 'last_pdf' not in st.session_state:
    st.session_state.last_pdf = None

if gerar:
    if not (nome and doc_id and cpf and endereco and local):
        st.error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è. (Preencha todos os campos obrigat√≥rios.)")
    else:
        data_str = data_input.strftime("%d/%m/%Y")
        logo_bytes = logo_file.read() if logo_file else None
        try:
            pdf_bytes = generate_pdf(
                nome.strip(), doc_id.strip(), cpf.strip(), endereco.strip(), local.strip(),
                data_str, logo_bytes=logo_bytes, qr_text=(qr_text.strip() or None)
            )
            st.session_state.last_pdf = pdf_bytes
            st.success("PDF –≥–æ—Ç–æ–≤! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è. (PDF gerado! Use o bot√£o abaixo.)")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")

if st.session_state.last_pdf:
    st.download_button(
        label="‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF (Baixar PDF)",
        data=st.session_state.last_pdf,
        file_name="declaracao_residencia_unicode.pdf",
        mime="application/pdf",
    )
